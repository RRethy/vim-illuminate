*illuminate.txt*  Vim plugin for selectively illuminating other uses of
                the current word

Author:  Adam P. Regasz-Rethy (RRethy) <rethy.spud@gmail.com>
License: Same terms as Vim itself (see |license|)

INTRODUCTION                                                     *illuminate*
=============================================================================

This plugin is a tool for illuminating the other uses of the current word
under the cursor.

|illuminate| will by default highlight all uses of the word under the cursor,
but with a little bit of configuration it can easily only highlight what you
want it to highlight based on the filetype and highlight-groups.

|illuminate| will also do a few other niceties such as delaying the highlight
for a user-defined amount of time based on `g:Illuminate_delay` (by default
250), it will interact nicely with search highlighting, jumping around
between buffers, jumping around between windows, and won't illuminate
while in insert mode.


CONFIGURATION                                      *illuminate-configuration*
=============================================================================

|illuminate| will delay before highlighting, this is not lag, it is to avoid
the jarring experience of things illuminating too fast. This can be
controlled with `g:Illuminate_delay` (which is default to 250 milliseconds):
>
    " Time in milliseconds (default 250)
    let g:Illuminate_delay = 250

|illuminate| will by default highlight the word under the cursor to match the
behaviour seen in Intellij and VSCode. However, to make it not highlight the
word under the cursor, use the following:
>
    " Don't highlight word under cursor (default: 1)
    let g:Illuminate_highlightUnderCursor = 0

Sets the priority when |illuminate| highlights.
This value is passed as an argument to |matchadd|.
>
    " Highlight priority (default: -1)
    let g:Illuminate_highlightPriority = -1

By default |illuminate| will highlight all words the cursor passes over, but
for many languages, you will only want to highlight certain |highlight-groups|
(you can determine the highlight-group of a symbol under your cursor with
`:echo synIDattr(synID(line("."), col("."), 1), "name")`).

You can define which highlight groups you want the illuminating to apply to.
This can be done with a dict mapping a filetype to a list of
|highlight-groups| in your vimrc such as:
>
    let g:Illuminate_ftHighlightGroups = {
          \ 'vim': ['vimVar', 'vimString', 'vimLineComment',
          \         'vimFuncName', 'vimFunction', 'vimUserFunc', 'vimFunc']
          \ }

This can also be used to create a blacklist of highlight groups by adding the
suffix ':blacklist' onto the filetype. However, if the whitelist for that
filetype already exists, it will override the blacklist.
>
    let g:Illuminate_ftHighlightGroups = {
          \ 'vim:blacklist': ['vimVar', 'vimString', 'vimLineComment',
          \         'vimFuncName', 'vimFunction', 'vimUserFunc', 'vimFunc']
          \ }

Note: The blacklist of highlight groups will be overriden by any whitelist for
the filetype.

|illuminate| can also be disabled for various |filetypes| using
g:Illuminate_ftblacklist.
>
    let g:Illuminate_ftblacklist = ['nerdtree']

If you prefer, however, to enable |illuminate| only for a handful of filetypes
you can use g:Illuminate_ftwhitelist instead.

Note: When both blacklist and whitelist are used, only the |filetypes| in
whitelist with the exclusion of the ones from blacklist will be enabled.
For example, with:
>
    let g:Illuminate_ftwhitelist = ['python', 'sh', 'nerdtree']
    let g:Illuminate_ftblacklist = ['nerdtree']


only `python` and `sh` will be illuminated.

By default the highlighting will be done with the |highlight-group|
`CursorLine` since that is in my opinion the nicest. It can however be
overridden using the following (use standard Vim highlighting syntax):

Note: It must be in an autocmd to get around a weird Neovim behaviour.
>
    augroup illuminate_augroup
        autocmd!
        autocmd VimEnter * hi illuminatedWord cterm=underline gui=underline
    augroup END

You can also specify a specific highlight for the word under the cursor so it
differs from all other matches using the following higlight group:
>
    augroup illuminate_augroup
        autocmd!
        autocmd VimEnter * hi illuminatedCurWord cterm=italic gui=italic
    augroup END


COMMANDS                                             *illuminate-commands*
=========================================================================

 ----------------------+-------------------------------------------------
 Command               | List                                                                  ~
 ----------------------+-------------------------------------------------
  `IlluminationDisable`  | Disable the illumination
  `IlluminationEnable`   | Enable the previously disabled illumination
  `IlluminationToggle`   | Toggle the illumination
 ----------------------+-------------------------------------------------


FAQ                                                        *illuminate-faq*
=============================================================================

Q: I am seeing by default an underline for the matched words

A: The reason for the underline is that the highlighting is done with
   `CursorLine` by default, which defaults to an underline. Try this:
>
    :hi link illuminatedWord Visual.


vim:tw=78:ts=8:ft=help:norl:
